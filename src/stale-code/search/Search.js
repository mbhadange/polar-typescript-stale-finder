"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const libpath = __importStar(require("path"));
const fs = __importStar(require("fs"));
const FilePaths_1 = require("polar-shared/src/util/FilePaths");
const readline = __importStar(require("readline"));
class Search {
    static find(dir, opts = new DefaultOpts()) {
        const files = fs.readdirSync(dir);
        const result = [];
        for (const name of files) {
            const createType = () => {
                if (stat.isDirectory()) {
                    return 'directory';
                }
                if (stat.isFile()) {
                    return 'file';
                }
                return undefined;
            };
            const type = createType();
            if (!type) {
                continue;
            }
            const createRecord = () => {
                return { type, name, path };
            };
            const file = createRecord();
            const path = libpath.join(dir, name);
            const stat = fs.statSync(path);
            const acceptFile = () => {
                const acceptExtension = () => {
                    if (!opts.extensions) {
                        return true;
                    }
                    const ext = FilePaths_1.FilePaths.toExtension(path).getOrUndefined();
                    return ext && opts.extensions.includes(ext);
                };
                const acceptType = () => {
                    if (!opts.types) {
                        return true;
                    }
                    return opts.types.includes(type);
                };
                return acceptExtension() && acceptType();
            };
            if (acceptFile()) {
                result.push(file);
            }
            if (opts.recurse && type === 'directory') {
                result.push(...this.find(path, opts));
            }
        }
        return result;
    }
}
exports.Search = Search;
class DefaultOpts {
    constructor() {
        this.recurse = true;
        this.types = ['file'];
    }
}
let hitMap = new Map();
let opts = new DefaultOpts();
let rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});
rl.question('Enter the directory to be parsed through: ', (currDirectory) => {
    currDirectory.toLowerCase();
    for (var file in Search.find(currDirectory, opts)) {
        if (file.split('.').pop() === 'ts' || file.split('.').pop() === 'tsx') {
            const data = fs.readFileSync(file, 'utf8');
            const lines = data.split(/\r?\n/);
            let re = `import(?:["'\s]*([\w*{}\n\r\t, ]+)from\s*)?["'\s].*([@\w_-]+)["'\s].*;$`;
            lines.forEach((line) => {
                let importLine = line.match(re);
                if (importLine != null) {
                    let importVal = importLine[1];
                    let filePath = importVal.split(' ').pop();
                    var fullPath = currDirectory + filePath;
                    if (hitMap.has(fullPath) === true) {
                        var currVal = hitMap.get(fullPath);
                        hitMap.set(fullPath, currVal + 1);
                    }
                    else {
                        hitMap.set(fullPath, 1);
                    }
                }
            });
        }
    }
    rl.close();
});
console.log(hitMap);
//# sourceMappingURL=data:application/json;base64,