"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const libpath = __importStar(require("path"));
const fs = __importStar(require("fs"));
const FilePaths_1 = require("polar-shared/src/util/FilePaths");
const path = __importStar(require("path"));
class Search {
    static find(dir, opts = new DefaultOpts()) {
        const files = fs.readdirSync(dir);
        const result = [];
        for (const name of files) {
            const path = libpath.join(dir, name);
            const stat = fs.statSync(path);
            const createType = () => {
                if (stat.isDirectory()) {
                    return 'directory';
                }
                if (stat.isFile()) {
                    return 'file';
                }
                return undefined;
            };
            const type = createType();
            if (!type) {
                continue;
            }
            const createRecord = () => {
                return { type, name, path };
            };
            const file = createRecord();
            const acceptFile = () => {
                const acceptExtension = () => {
                    if (!opts.extensions) {
                        return true;
                    }
                    const ext = FilePaths_1.FilePaths.toExtension(path).getOrUndefined();
                    return ext && opts.extensions.includes(ext);
                };
                const acceptType = () => {
                    if (!opts.types) {
                        return true;
                    }
                    return opts.types.includes(type);
                };
                return acceptExtension() && acceptType();
            };
            if (acceptFile()) {
                result.push(file);
            }
            if (opts.recurse && type === 'directory') {
                result.push(...this.find(path, opts));
            }
        }
        return result;
    }
}
exports.Search = Search;
class DefaultOpts {
    constructor() {
        this.recurse = true;
        this.types = ['file'];
    }
}
let hitMap = new Map();
let opts = new DefaultOpts();
var myArgs = process.argv[2];
var fileMap = Search.find(myArgs, opts);
for (var k = 0; k < fileMap.length; k++) {
    if (fileMap[k].name.includes('test.ts') || fileMap[k].name.includes('.d.ts')) {
        continue;
    }
    else if (fileMap[k].name.split('.').pop() === 'ts' || fileMap[k].name.split('.').pop() === 'tsx') {
        hitMap.set(fileMap[k].path, 0);
    }
}
for (var i = 0; i < fileMap.length; i++) {
    var file = fileMap[i];
    var initialFileName = file.name;
    var initialFilePath = file.path;
    if (file.name.includes('test.ts') || file.name.includes('.d.ts')) {
        continue;
    }
    else if (initialFileName.split('.').pop() === 'ts' || initialFileName.split('.').pop() === 'tsx') {
        const data = fs.readFileSync(initialFilePath, 'utf8');
        const lines = data.split(/\r?\n/);
        let re = /import(?:["'\s]*([\w*{}\n\r\t, ]+)from\s*)?["'\s].*([@\w_-]+)["'\s].*;$/;
        lines.forEach((line) => {
            let importLine = line.match(re);
            if (importLine != null) {
                let importVal = importLine[0];
                let filePath = importVal.split(' ').pop();
                var fullPath;
                if (filePath != undefined) {
                    if (filePath.includes('./') || filePath.includes('../')) {
                        filePath = filePath.replace(/['"]+/g, '');
                        if (filePath.includes('.ts') == false) {
                            filePath = filePath.replace(filePath.substring(filePath.length - 1), "");
                            filePath = filePath + '.ts';
                        }
                        var fullDirectory = path.dirname(initialFilePath);
                        fullPath = path.resolve(fullDirectory, filePath);
                        if (fs.existsSync(fullPath) == false) {
                            fullPath = fullPath + 'x';
                            if (fs.existsSync(fullPath) == false) {
                                fullPath = fullPath.replace(fullPath.substring(fullPath.length - 3), "");
                                fullPath = fullPath + 'd.ts';
                                if (fullPath.includes('utils.js.d.ts')) {
                                    fullPath = fullPath.replace(fullPath.substring(fullPath.length - 7), "");
                                    fullPath = fullPath + 'ts';
                                }
                                if (fs.existsSync(fullPath) == false) {
                                    console.warn("File does not exist: " + fullPath);
                                }
                            }
                        }
                    }
                }
                if (fullPath != undefined) {
                    if (hitMap.has(fullPath) === true) {
                        var currVal = hitMap.get(fullPath);
                        hitMap.set(fullPath, currVal + 1);
                    }
                    else {
                        hitMap.set(fullPath, 1);
                    }
                }
            }
        });
    }
}
hitMap[Symbol.iterator] = function* () {
    yield* [...this.entries()].sort((a, b) => a[1] - b[1]);
};
var updatedHitMap = [...hitMap];
var finalHitMap = [];
for (var index = 0; index < updatedHitMap.length; index++) {
    var currentArray = updatedHitMap[index];
    var key = currentArray[0];
    var value = currentArray[1];
    finalHitMap[index] = [value, key];
}
for (var j = 0; j < finalHitMap.length; j++) {
    var curr = finalHitMap[j];
    if (curr[1].includes('Test') == false && curr[1].includes('test') == false) {
        console.log(curr[0], ' ', curr[1]);
    }
}
//# sourceMappingURL=data:application/json;base64,