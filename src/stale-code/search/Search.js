"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const libpath = __importStar(require("path"));
const fs = __importStar(require("fs"));
const FilePaths_1 = require("polar-shared/src/util/FilePaths");
const readline = __importStar(require("readline"));
class Search {
    static find(dir, opts = new DefaultOpts()) {
        const files = fs.readdirSync(dir);
        const result = [];
        for (const name of files) {
            const createType = () => {
                if (stat.isDirectory()) {
                    return 'directory';
                }
                if (stat.isFile()) {
                    return 'file';
                }
                return undefined;
            };
            const type = createType();
            if (!type) {
                continue;
            }
            const createRecord = () => {
                return { type, name, path };
            };
            const file = createRecord();
            const path = libpath.join(dir, name);
            const stat = fs.statSync(path);
            const acceptFile = () => {
                const acceptExtension = () => {
                    if (!opts.extensions) {
                        return true;
                    }
                    const ext = FilePaths_1.FilePaths.toExtension(path).getOrUndefined();
                    return ext && opts.extensions.includes(ext);
                };
                const acceptType = () => {
                    if (!opts.types) {
                        return true;
                    }
                    return opts.types.includes(type);
                };
                return acceptExtension() && acceptType();
            };
            if (acceptFile()) {
                result.push(file);
            }
            if (opts.recurse && type === 'directory') {
                result.push(...this.find(path, opts));
            }
        }
        return result;
    }
}
exports.Search = Search;
class DefaultOpts {
    constructor() {
        this.recurse = true;
        this.types = ['file'];
    }
}
let hitMap = new Map();
let opts = new DefaultOpts();
let rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});
rl.question('Enter the directory to be parsed through: ', (currDirectory) => {
    currDirectory.toLowerCase();
    let file_array = Search.find(currDirectory, opts);
    console.log('Hello');
    rl.close();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2VhcmNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVNBLDhDQUFnQztBQUNoQyx1Q0FBeUI7QUFDekIsK0RBQTBEO0FBRTFELG1EQUFxQztBQUVyQyxNQUFhLE1BQU07SUFDUixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQVcsRUFBRSxPQUFhLElBQUksV0FBVyxFQUFFO1FBQzFELE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbEMsTUFBTSxNQUFNLEdBQVksRUFBRSxDQUFDO1FBRTNCLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1lBRXRCLE1BQU0sVUFBVSxHQUFHLEdBQXlCLEVBQUU7Z0JBQzFDLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFO29CQUNwQixPQUFPLFdBQVcsQ0FBQztpQkFDdEI7Z0JBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUU7b0JBQ2YsT0FBTyxNQUFNLENBQUM7aUJBQ2pCO2dCQUNELE9BQU8sU0FBUyxDQUFDO1lBQ3JCLENBQUMsQ0FBQztZQUNGLE1BQU0sSUFBSSxHQUFHLFVBQVUsRUFBRSxDQUFDO1lBQzFCLElBQUksQ0FBRSxJQUFJLEVBQUU7Z0JBQ1IsU0FBUzthQUNaO1lBQ0QsTUFBTSxZQUFZLEdBQUcsR0FBVSxFQUFFO2dCQUM3QixPQUFPLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQztZQUM5QixDQUFDLENBQUM7WUFFRixNQUFNLElBQUksR0FBRyxZQUFZLEVBQUUsQ0FBQztZQUM1QixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNyQyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBSy9CLE1BQU0sVUFBVSxHQUFHLEdBQUcsRUFBRTtnQkFDcEIsTUFBTSxlQUFlLEdBQUcsR0FBRyxFQUFFO29CQUN6QixJQUFJLENBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRTt3QkFDbkIsT0FBTyxJQUFJLENBQUM7cUJBQ2Y7b0JBQ0QsTUFBTSxHQUFHLEdBQUcscUJBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7b0JBQ3pELE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNoRCxDQUFDLENBQUM7Z0JBQ0YsTUFBTSxVQUFVLEdBQUcsR0FBRyxFQUFFO29CQUNwQixJQUFJLENBQUUsSUFBSSxDQUFDLEtBQUssRUFBRTt3QkFDZCxPQUFPLElBQUksQ0FBQztxQkFDZjtvQkFDRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNyQyxDQUFDLENBQUM7Z0JBQ0YsT0FBTyxlQUFlLEVBQUUsSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUM3QyxDQUFDLENBQUM7WUFDRixJQUFJLFVBQVUsRUFBRSxFQUFFO2dCQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDckI7WUFDRCxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxLQUFLLFdBQVcsRUFBRTtnQkFDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDekM7U0FDSjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Q0FDSjtBQTFERCx3QkEwREM7QUFPRCxNQUFNLFdBQVc7SUFBakI7UUFDb0IsWUFBTyxHQUFHLElBQUksQ0FBQztRQUNmLFVBQUssR0FBNEIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5RCxDQUFDO0NBQUE7QUFnQkQsSUFBSSxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUN2QixJQUFJLElBQUksR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQzdCLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUM7SUFDOUIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO0lBQ3BCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtDQUN2QixDQUFDLENBQUM7QUFFSCxFQUFFLENBQUMsUUFBUSxDQUFDLDRDQUE0QyxFQUFFLENBQUMsYUFBYSxFQUFFLEVBQUU7SUFDeEUsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzVCLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xELE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkIsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2IsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIElTT0RhdGVTdHJpbmcsXG4gICAgSVNPRGF0ZVRpbWVTdHJpbmcsXG4gICAgSVNPRGF0ZVllYXJNb250aFN0cmluZyxcbiAgICBJU09EYXRlWWVhclN0cmluZyxcbn0gZnJvbSBcInBvbGFyLXNoYXJlZC9zcmMvbWV0YWRhdGEvSVNPRGF0ZVRpbWVTdHJpbmdzXCI7XG5pbXBvcnQge0RPSVN0cn0gZnJvbSBcInBvbGFyLXNoYXJlZC9zcmMvdXRpbC9TdHJpbmdzXCI7XG5cbmltcG9ydCBFcnJub0V4Y2VwdGlvbiA9IE5vZGVKUy5FcnJub0V4Y2VwdGlvbjtcbmltcG9ydCAqIGFzIGxpYnBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0IHtGaWxlUGF0aHN9IGZyb20gXCJwb2xhci1zaGFyZWQvc3JjL3V0aWwvRmlsZVBhdGhzXCI7XG5pbXBvcnQge1BhdGhTdHJ9IGZyb20gXCJwb2xhci1zaGFyZWQvc3JjL3V0aWwvU3RyaW5nc1wiO1xuaW1wb3J0ICogYXMgcmVhZGxpbmUgZnJvbSAncmVhZGxpbmUnO1xuXG5leHBvcnQgY2xhc3MgU2VhcmNoIHtcbiAgICBwdWJsaWMgc3RhdGljIGZpbmQoZGlyOiBzdHJpbmcsIG9wdHM6IE9wdHMgPSBuZXcgRGVmYXVsdE9wdHMoKSk6IFJlYWRvbmx5QXJyYXk8SUZpbGU+IHtcbiAgICAgICAgY29uc3QgZmlsZXMgPSBmcy5yZWFkZGlyU3luYyhkaXIpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdDogSUZpbGVbXSA9IFtdO1xuXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBmaWxlcykge1xuXG4gICAgICAgICAgICBjb25zdCBjcmVhdGVUeXBlID0gKCk6IEZpbGVUeXBlIHwgdW5kZWZpbmVkID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZGlyZWN0b3J5JztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdC5pc0ZpbGUoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2ZpbGUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBjcmVhdGVUeXBlKCk7XG4gICAgICAgICAgICBpZiAoISB0eXBlKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjcmVhdGVSZWNvcmQgPSAoKTogSUZpbGUgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZSwgbmFtZSwgcGF0aH07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBmaWxlID0gY3JlYXRlUmVjb3JkKCk7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gbGlicGF0aC5qb2luKGRpciwgbmFtZSk7XG4gICAgICAgICAgICBjb25zdCBzdGF0ID0gZnMuc3RhdFN5bmMocGF0aCk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJuIHRydWUgaWYgd2Ugc2hvdWxkIGFjY2VwdCB0aGUgZmlsZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgYWNjZXB0RmlsZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBhY2NlcHRFeHRlbnNpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghIG9wdHMuZXh0ZW5zaW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXh0ID0gRmlsZVBhdGhzLnRvRXh0ZW5zaW9uKHBhdGgpLmdldE9yVW5kZWZpbmVkKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBleHQgJiYgb3B0cy5leHRlbnNpb25zLmluY2x1ZGVzKGV4dCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBhY2NlcHRUeXBlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISBvcHRzLnR5cGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy50eXBlcy5pbmNsdWRlcyh0eXBlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBhY2NlcHRFeHRlbnNpb24oKSAmJiBhY2NlcHRUeXBlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGFjY2VwdEZpbGUoKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGZpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdHMucmVjdXJzZSAmJiB0eXBlID09PSAnZGlyZWN0b3J5Jykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKC4uLnRoaXMuZmluZChwYXRoLCBvcHRzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbi8vIHRoZSBmaWxlIHR5cGUgdGhhdCBpcyBjb21wYXRpYmFsZVxuZXhwb3J0IHR5cGUgRmlsZVR5cGUgPSAnZmlsZScgfCAnZGlyZWN0b3J5Jztcbi8vIEEgZmlsZSBleHRlbnNpb24gd2l0aG91dCB0aGUgJy4nIHByZWZpeC4gIEV4YW1wbGU6IGpwZywganBlZywgdHh0XG5leHBvcnQgdHlwZSBGaWxlRXh0ID0gc3RyaW5nO1xuXG5jbGFzcyBEZWZhdWx0T3B0cyBpbXBsZW1lbnRzIE9wdHMge1xuICAgIHB1YmxpYyByZWFkb25seSByZWN1cnNlID0gdHJ1ZTtcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZXM6IFJlYWRvbmx5QXJyYXk8RmlsZVR5cGU+ID0gWydmaWxlJ107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT3B0cyB7XG4gICAgcmVhZG9ubHkgcmVjdXJzZT86IGJvb2xlYW47XG4gICAgLy8gT25seSBhY2NlcHQgdGhlIGdpdmVuIGZpbGUgdHlwZXMuICBCeSBkZWZhdWx0IGFsbCB0eXBlcyBhcmUgYWNjZXB0ZWQuXG4gICAgcmVhZG9ubHkgdHlwZXM/OiBSZWFkb25seUFycmF5PEZpbGVUeXBlPjsgXG4gICAgLy8gT25seSBhY2NlcHQgdGhlIGdpdmVuIGV4dGVuc2lvbnMuIEJ5IGRlZmF1bHQgYWxsIGV4dGVuc2lvbiBhcmUgYWNjZXB0ZWQuXG4gICAgcmVhZG9ubHkgZXh0ZW5zaW9ucz86IFJlYWRvbmx5QXJyYXk8RmlsZUV4dD47IFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElGaWxlIHtcbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmc7IFxuICAgIHJlYWRvbmx5IHBhdGg6IFBhdGhTdHI7IC8vIHRoZSBlbnRpcmUgcGF0aCBvZiB0aGUgZmlsZVxuICAgIHJlYWRvbmx5IHR5cGU6IEZpbGVUeXBlOyAvLyB3aGF0IHR5cGUgdGhlIGZpbGUgaXNcbn1cblxubGV0IGhpdE1hcCA9IG5ldyBNYXAoKTtcbmxldCBvcHRzID0gbmV3IERlZmF1bHRPcHRzKCk7XG5sZXQgcmwgPSByZWFkbGluZS5jcmVhdGVJbnRlcmZhY2Uoe1xuICAgIGlucHV0OiBwcm9jZXNzLnN0ZGluLFxuICAgIG91dHB1dDogcHJvY2Vzcy5zdGRvdXRcbiAgfSk7XG4gIFxuICBybC5xdWVzdGlvbignRW50ZXIgdGhlIGRpcmVjdG9yeSB0byBiZSBwYXJzZWQgdGhyb3VnaDogJywgKGN1cnJEaXJlY3RvcnkpID0+IHtcbiAgICAgIGN1cnJEaXJlY3RvcnkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGxldCBmaWxlX2FycmF5ID0gU2VhcmNoLmZpbmQoY3VyckRpcmVjdG9yeSwgb3B0cyk7XG4gICAgICBjb25zb2xlLmxvZygnSGVsbG8nKTtcbiAgICBybC5jbG9zZSgpO1xuICB9KTtcblxuICAiXX0=