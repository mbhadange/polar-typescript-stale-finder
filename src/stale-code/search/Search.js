"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const find_1 = require("./find");
const find_2 = require("./find");
function SetUpMap() {
    for (var k = 0; k < fileMap.length; k++) {
        if (hitMap.has(fileMap[k].path) == false) {
            if (fileMap[k].name.includes('test.ts') || fileMap[k].name.includes('.d.ts')) {
                continue;
            }
            else if (fileMap[k].name.split('.').pop() === 'ts' || fileMap[k].name.split('.').pop() === 'tsx') {
                hitMap.set(fileMap[k].path, 0);
            }
        }
    }
}
function FormatsMap() {
    hitMap[Symbol.iterator] = function* () {
        yield* [...this.entries()].sort((a, b) => a[1] - b[1]);
    };
    var updatedHitMap = [...hitMap];
    var finalHitMap = [];
    for (var index = 0; index < updatedHitMap.length; index++) {
        var currentArray = updatedHitMap[index];
        var key = currentArray[0];
        var value = currentArray[1];
        finalHitMap[index] = [value, key];
    }
    for (var j = 0; j < finalHitMap.length; j++) {
        var curr = finalHitMap[j];
        if (curr[1].includes('Test') == false && curr[1].includes('test') == false) {
            console.log(curr[0], ' ', curr[1]);
        }
    }
}
function UpdateMap() {
    const data = fs.readFileSync(initialFilePath, 'utf8');
    const lines = data.split(/\r?\n/);
    const re = /import(?:["'\s]*([\w*{}\n\r\t, ]+)from\s*)?["'\s].*([@\w_-]+)["'\s].*;$/;
    lines.forEach((line) => {
        var importLine = line.match(re);
        if (importLine != null) {
            var importVal = importLine[0];
            var filePath = importVal.split(' ').pop();
            var fullPath;
            if (filePath != undefined) {
                if (filePath.includes('./') || filePath.includes('../')) {
                    filePath = filePath.replace(/['"]+/g, '');
                    if (filePath.includes('.ts') == false) {
                        filePath = filePath.replace(filePath.substring(filePath.length - 1), "");
                        filePath = filePath + '.ts';
                    }
                    var fullDirectory = path.dirname(initialFilePath);
                    fullPath = path.resolve(fullDirectory, filePath);
                    if (fs.existsSync(fullPath) == false) {
                        fullPath = fullPath + 'x';
                        if (fs.existsSync(fullPath) == false) {
                            fullPath = fullPath.replace(fullPath.substring(fullPath.length - 3), "");
                            fullPath = fullPath + 'd.ts';
                            if (fullPath.includes('utils.js.d.ts')) {
                                fullPath = fullPath.replace(fullPath.substring(fullPath.length - 7), "");
                                fullPath = fullPath + 'ts';
                            }
                            if (fs.existsSync(fullPath) == false) {
                                console.warn("File does not exist: " + fullPath);
                            }
                        }
                    }
                }
            }
            if (fullPath != undefined) {
                if (hitMap.has(fullPath) === true) {
                    var currVal = hitMap.get(fullPath);
                    hitMap.set(fullPath, currVal + 1);
                }
                else {
                    hitMap.set(fullPath, 1);
                }
            }
        }
    });
}
var hitMap = new Map();
var argument = process.argv;
for (var x = 2; x < argument.length; x++) {
    const opts = new find_2.DefaultOpts();
    var myArgs = argument[x];
    var fileMap = find_1.Search.find(myArgs, opts);
    SetUpMap();
    for (var i = 0; i < fileMap.length; i++) {
        var file = fileMap[i];
        var initialFileName = file.name;
        var initialFilePath = file.path;
        if (file.name.includes('test.ts') || file.name.includes('.d.ts')) {
            continue;
        }
        else if (initialFileName.split('.').pop() === 'ts' || initialFileName.split('.').pop() === 'tsx') {
            UpdateMap();
        }
    }
}
FormatsMap();
//# sourceMappingURL=data:application/json;base64,