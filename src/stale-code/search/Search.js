"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = exports.getExtension = exports.printMap = exports.swapMapValues = exports.sortMap = exports.expandPath = exports.checkFullPath = exports.updateHitMap = exports.initializeTypescriptMapFiles = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const find_1 = require("./find");
const find_2 = require("./find");
function initializeTypescriptMapFiles(data, currMap) {
    for (var k = 0; k < data.length; k++) {
        if (currMap.has(data[k].path) == false) {
            if (data[k].name.includes('test.ts') || data[k].name.includes('.d.ts')) {
                continue;
            }
            else if (data[k].name.split('.').pop() === 'ts' || data[k].name.split('.').pop() === 'tsx') {
                currMap.set(data[k].path, 0);
            }
        }
    }
}
exports.initializeTypescriptMapFiles = initializeTypescriptMapFiles;
function updateHitMap(currFullPath, currMap) {
    if (currFullPath != undefined) {
        if (currMap.has(currFullPath) === true) {
            var currVal = currMap.get(currFullPath);
            if (currVal != undefined) {
                currMap.set(currFullPath, currVal + 1);
            }
        }
        else {
            currMap.set(currFullPath, 1);
        }
    }
}
exports.updateHitMap = updateHitMap;
function checkFullPath(finalPath) {
    if (fs.existsSync(finalPath) == false) {
        finalPath = finalPath + 'x';
        if (fs.existsSync(finalPath) == false) {
            finalPath = finalPath.replace(finalPath.substring(finalPath.length - 3), "");
            finalPath = finalPath + 'd.ts';
            if (finalPath.includes('utils.js.d.ts')) {
                finalPath = finalPath.replace(finalPath.substring(finalPath.length - 7), "");
                finalPath = finalPath + 'ts';
            }
            if (fs.existsSync(finalPath) == false) {
                console.warn("File does not exist: " + finalPath);
            }
        }
    }
    return finalPath;
}
exports.checkFullPath = checkFullPath;
function expandPath(currPath) {
    currPath = currPath.replace(/['"]+/g, '');
    if (currPath.includes('.ts') == false) {
        currPath = currPath.replace(currPath.substring(currPath.length - 1), "");
        currPath = currPath + '.ts';
    }
    return currPath;
}
exports.expandPath = expandPath;
function sortMap(currMap) {
    currMap[Symbol.iterator] = function* () {
        yield* [...this.entries()].sort((a, b) => a[1] - b[1]);
    };
    return currMap;
}
exports.sortMap = sortMap;
function swapMapValues(currMap) {
    var finalHitMap = [];
    for (var index = 0; index < currMap.length; index++) {
        var currentArray = currMap[index];
        var key = currentArray[0];
        var value = currentArray[1];
        finalHitMap[index] = [value, key];
    }
    return finalHitMap;
}
exports.swapMapValues = swapMapValues;
function printMap(finalMap) {
    for (var j = 0; j < finalMap.length; j++) {
        var curr = finalMap[j];
        if (curr[1].includes('Test') == false && curr[1].includes('test') == false) {
            console.log(curr[0], ' ', curr[1]);
        }
    }
}
exports.printMap = printMap;
function getExtension(filename) {
    var extension = filename.split('.').pop();
    if (extension != undefined) {
        return extension;
    }
    else {
        return 'undefined';
    }
}
exports.getExtension = getExtension;
function main() {
    var argument = process.argv;
    var hitMap = new Map();
    for (var x = 2; x < argument.length; x++) {
        const opts = new find_2.DefaultOpts();
        var myArgs = argument[x];
        var fileMap = find_1.Search.findFilesRecursively(myArgs, opts);
        initializeTypescriptMapFiles(fileMap, hitMap);
        for (var i = 0; i < fileMap.length; i++) {
            var file = fileMap[i];
            var initialFileName = file.name;
            var initialFilePath = file.path;
            var ext = getExtension(initialFileName);
            if (file.name.includes('test.ts') || file.name.includes('.d.ts')) {
                continue;
            }
            else if (['ts', 'tsx'].includes(ext)) {
                const data = fs.readFileSync(initialFilePath, 'utf8');
                const lines = data.split(/\r?\n/);
                const re = /import(?:["'\s]*([\w*{}\n\r\t, ]+)from\s*)?["'\s].*([@\w_-]+)["'\s].*;$/;
                lines.forEach((line) => {
                    var importLine = line.match(re);
                    if (importLine != null) {
                        var importVal = importLine[0];
                        var filePath = importVal.split(' ').pop();
                        var fullPath;
                        if (filePath != undefined) {
                            if (filePath.includes('./') || filePath.includes('../')) {
                                filePath = expandPath(filePath);
                                var fullDirectory = path.dirname(initialFilePath);
                                fullPath = path.resolve(fullDirectory, filePath);
                                fullPath = checkFullPath(fullPath);
                            }
                        }
                        if (fullPath != undefined) {
                            updateHitMap(fullPath, hitMap);
                        }
                    }
                });
            }
        }
    }
    hitMap = sortMap(hitMap);
    var updatedHitMap = [...hitMap];
    var finalMap = swapMapValues(updatedHitMap);
    printMap(finalMap);
}
exports.main = main;
main();
//# sourceMappingURL=data:application/json;base64,