"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const libpath = __importStar(require("path"));
const fs = __importStar(require("fs"));
const FilePaths_1 = require("polar-shared/src/util/FilePaths");
const path = __importStar(require("path"));
class Search {
    static find(dir, opts = new DefaultOpts()) {
        const files = fs.readdirSync(dir);
        const result = [];
        for (const name of files) {
            const path = libpath.join(dir, name);
            const stat = fs.statSync(path);
            const createType = () => {
                if (stat.isDirectory()) {
                    return 'directory';
                }
                if (stat.isFile()) {
                    return 'file';
                }
                return undefined;
            };
            const type = createType();
            if (!type) {
                continue;
            }
            const createRecord = () => {
                return { type, name, path };
            };
            const file = createRecord();
            const acceptFile = () => {
                const acceptExtension = () => {
                    if (!opts.extensions) {
                        return true;
                    }
                    const ext = FilePaths_1.FilePaths.toExtension(path).getOrUndefined();
                    return ext && opts.extensions.includes(ext);
                };
                const acceptType = () => {
                    if (!opts.types) {
                        return true;
                    }
                    return opts.types.includes(type);
                };
                return acceptExtension() && acceptType();
            };
            if (acceptFile()) {
                result.push(file);
            }
            if (opts.recurse && type === 'directory') {
                result.push(...this.find(path, opts));
            }
        }
        return result;
    }
}
exports.Search = Search;
class DefaultOpts {
    constructor() {
        this.recurse = true;
        this.types = ['file'];
    }
}
let hitMap = new Map();
for (var x = 2; x < 4; x++) {
    let opts = new DefaultOpts();
    var myArgs = process.argv[x];
    var fileMap = Search.find(myArgs, opts);
    for (var k = 0; k < fileMap.length; k++) {
        if (hitMap.has(fileMap[k].path) == false) {
            if (fileMap[k].name.includes('test.ts') || fileMap[k].name.includes('.d.ts')) {
                continue;
            }
            else if (fileMap[k].name.split('.').pop() === 'ts' || fileMap[k].name.split('.').pop() === 'tsx') {
                hitMap.set(fileMap[k].path, 0);
            }
        }
    }
    for (var i = 0; i < fileMap.length; i++) {
        var file = fileMap[i];
        var initialFileName = file.name;
        var initialFilePath = file.path;
        if (file.name.includes('test.ts') || file.name.includes('.d.ts')) {
            continue;
        }
        else if (initialFileName.split('.').pop() === 'ts' || initialFileName.split('.').pop() === 'tsx') {
            const data = fs.readFileSync(initialFilePath, 'utf8');
            const lines = data.split(/\r?\n/);
            let re = /import(?:["'\s]*([\w*{}\n\r\t, ]+)from\s*)?["'\s].*([@\w_-]+)["'\s].*;$/;
            lines.forEach((line) => {
                let importLine = line.match(re);
                if (importLine != null) {
                    let importVal = importLine[0];
                    let filePath = importVal.split(' ').pop();
                    var fullPath;
                    if (filePath != undefined) {
                        if (filePath.includes('./') || filePath.includes('../')) {
                            filePath = filePath.replace(/['"]+/g, '');
                            if (filePath.includes('.ts') == false) {
                                filePath = filePath.replace(filePath.substring(filePath.length - 1), "");
                                filePath = filePath + '.ts';
                            }
                            var fullDirectory = path.dirname(initialFilePath);
                            fullPath = path.resolve(fullDirectory, filePath);
                            if (fs.existsSync(fullPath) == false) {
                                fullPath = fullPath + 'x';
                                if (fs.existsSync(fullPath) == false) {
                                    fullPath = fullPath.replace(fullPath.substring(fullPath.length - 3), "");
                                    fullPath = fullPath + 'd.ts';
                                    if (fullPath.includes('utils.js.d.ts')) {
                                        fullPath = fullPath.replace(fullPath.substring(fullPath.length - 7), "");
                                        fullPath = fullPath + 'ts';
                                    }
                                    if (fs.existsSync(fullPath) == false) {
                                        console.warn("File does not exist: " + fullPath);
                                    }
                                }
                            }
                        }
                    }
                    if (fullPath != undefined) {
                        if (hitMap.has(fullPath) === true) {
                            var currVal = hitMap.get(fullPath);
                            hitMap.set(fullPath, currVal + 1);
                        }
                        else {
                            hitMap.set(fullPath, 1);
                        }
                    }
                }
            });
        }
    }
}
hitMap[Symbol.iterator] = function* () {
    yield* [...this.entries()].sort((a, b) => a[1] - b[1]);
};
var updatedHitMap = [...hitMap];
var finalHitMap = [];
for (var index = 0; index < updatedHitMap.length; index++) {
    var currentArray = updatedHitMap[index];
    var key = currentArray[0];
    var value = currentArray[1];
    finalHitMap[index] = [value, key];
}
for (var j = 0; j < finalHitMap.length; j++) {
    var curr = finalHitMap[j];
    if (curr[1].includes('Test') == false && curr[1].includes('test') == false) {
        console.log(curr[0], ' ', curr[1]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VhcmNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2VhcmNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBLDhDQUFnQztBQUNoQyx1Q0FBeUI7QUFDekIsK0RBQTBEO0FBRTFELDJDQUE2QjtBQUU3QixNQUFhLE1BQU07SUFDUixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQVcsRUFBRSxPQUFhLElBQUksV0FBVyxFQUFFO1FBQzFELE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbEMsTUFBTSxNQUFNLEdBQVksRUFBRSxDQUFDO1FBRTNCLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1lBRXRCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFL0IsTUFBTSxVQUFVLEdBQUcsR0FBeUIsRUFBRTtnQkFDMUMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUU7b0JBQ3BCLE9BQU8sV0FBVyxDQUFDO2lCQUN0QjtnQkFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRTtvQkFDZixPQUFPLE1BQU0sQ0FBQztpQkFDakI7Z0JBQ0QsT0FBTyxTQUFTLENBQUM7WUFDckIsQ0FBQyxDQUFDO1lBQ0YsTUFBTSxJQUFJLEdBQUcsVUFBVSxFQUFFLENBQUM7WUFDMUIsSUFBSSxDQUFFLElBQUksRUFBRTtnQkFDUixTQUFTO2FBQ1o7WUFDRCxNQUFNLFlBQVksR0FBRyxHQUFVLEVBQUU7Z0JBQzdCLE9BQU8sRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFDO1lBQzlCLENBQUMsQ0FBQztZQUVGLE1BQU0sSUFBSSxHQUFHLFlBQVksRUFBRSxDQUFDO1lBSzVCLE1BQU0sVUFBVSxHQUFH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QUcsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsSUFBSSxLQUFLLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVCLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztDQUNyQztBQUtELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3pDLElBQUksSUFBSSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFO1FBQ3hFLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN0QztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEVycm5vRXhjZXB0aW9uID0gTm9kZUpTLkVycm5vRXhjZXB0aW9uO1xuaW1wb3J0ICogYXMgbGlicGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQge0ZpbGVQYXRoc30gZnJvbSBcInBvbGFyLXNoYXJlZC9zcmMvdXRpbC9GaWxlUGF0aHNcIjtcbmltcG9ydCB7UGF0aFN0cn0gZnJvbSBcInBvbGFyLXNoYXJlZC9zcmMvdXRpbC9TdHJpbmdzXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgY2xhc3MgU2VhcmNoIHtcbiAgICBwdWJsaWMgc3RhdGljIGZpbmQoZGlyOiBzdHJpbmcsIG9wdHM6IE9wdHMgPSBuZXcgRGVmYXVsdE9wdHMoKSk6IFJlYWRvbmx5QXJyYXk8SUZpbGU+IHtcbiAgICAgICAgY29uc3QgZmlsZXMgPSBmcy5yZWFkZGlyU3luYyhkaXIpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdDogSUZpbGVbXSA9IFtdO1xuXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBmaWxlcykge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gbGlicGF0aC5qb2luKGRpciwgbmFtZSk7XG4gICAgICAgICAgICBjb25zdCBzdGF0ID0gZnMuc3RhdFN5bmMocGF0aCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZVR5cGUgPSAoKTogRmlsZVR5cGUgfCB1bmRlZmluZWQgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkaXJlY3RvcnknO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChzdGF0LmlzRmlsZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZmlsZSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IGNyZWF0ZVR5cGUoKTtcbiAgICAgICAgICAgIGlmICghIHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZVJlY29yZCA9ICgpOiBJRmlsZSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlLCBuYW1lLCBwYXRofTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBjcmVhdGVSZWNvcmQoKTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB3ZSBzaG91bGQgYWNjZXB0IHRoZSBmaWxlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCBhY2NlcHRGaWxlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjY2VwdEV4dGVuc2lvbiA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEgb3B0cy5leHRlbnNpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBleHQgPSBGaWxlUGF0aHMudG9FeHRlbnNpb24ocGF0aCkuZ2V0T3JVbmRlZmluZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4dCAmJiBvcHRzLmV4dGVuc2lvbnMuaW5jbHVkZXMoZXh0KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjY2VwdFR5cGUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghIG9wdHMudHlwZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLnR5cGVzLmluY2x1ZGVzKHR5cGUpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY2VwdEV4dGVuc2lvbigpICYmIGFjY2VwdFR5cGUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoYWNjZXB0RmlsZSgpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZmlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0cy5yZWN1cnNlICYmIHR5cGUgPT09ICdkaXJlY3RvcnknKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goLi4udGhpcy5maW5kKHBhdGgsIG9wdHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuLy8vIHRoZSBmaWxlIHR5cGUgdGhhdCBpcyBjb21wYXRpYmFsZVxuZXhwb3J0IHR5cGUgRmlsZVR5cGUgPSAnZmlsZScgfCAnZGlyZWN0b3J5Jztcbi8vLyBBIGZpbGUgZXh0ZW5zaW9uIHdpdGhvdXQgdGhlICcuJyBwcmVmaXguICBFeGFtcGxlOiBqcGcsIGpwZWcsIHR4dFxuZXhwb3J0IHR5cGUgRmlsZUV4dCA9IHN0cmluZztcblxuY2xhc3MgRGVmYXVsdE9wdHMgaW1wbGVtZW50cyBPcHRzIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmVjdXJzZSA9IHRydWU7XG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGVzOiBSZWFkb25seUFycmF5PEZpbGVUeXBlPiA9IFsnZmlsZSddO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9wdHMge1xuICAgIHJlYWRvbmx5IHJlY3Vyc2U/OiBib29sZWFuO1xuICAgIC8vLyBPbmx5IGFjY2VwdCB0aGUgZ2l2ZW4gZmlsZSB0eXBlcy4gIEJ5IGRlZmF1bHQgYWxsIHR5cGVzIGFyZSBhY2NlcHRlZC5cbiAgICByZWFkb25seSB0eXBlcz86IFJlYWRvbmx5QXJyYXk8RmlsZVR5cGU+OyBcbiAgICAvLy8gT25seSBhY2NlcHQgdGhlIGdpdmVuIGV4dGVuc2lvbnMuIEJ5IGRlZmF1bHQgYWxsIGV4dGVuc2lvbiBhcmUgYWNjZXB0ZWQuXG4gICAgcmVhZG9ubHkgZXh0ZW5zaW9ucz86IFJlYWRvbmx5QXJyYXk8RmlsZUV4dD47IFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElGaWxlIHtcbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmc7IFxuICAgIHJlYWRvbmx5IHBhdGg6IFBhdGhTdHI7IC8vLyB0aGUgZW50aXJlIHBhdGggb2YgdGhlIGZpbGVcbiAgICByZWFkb25seSB0eXBlOiBGaWxlVHlwZTsgLy8vIHdoYXQgdHlwZSB0aGUgZmlsZSBpc1xufVxuXG4vLy8gY3JlYXRlcyBhbiBlbXB0eSBtYXBcbmxldCBoaXRNYXAgPSBuZXcgTWFwKCk7XG5cbi8qKlxuICogdXNlcyBwcm9jZXNzLmFyZ3YgdG8gc2VlIHdoaWNoIGRpcmVjdG9yeSB0byBwYXJzZSB0aHJvdWdoIHVzaW5nIHRoZSBjb21tYW5kIGxpbmVcbiAqIGV4YW1wbGU6IG5vZGUgU2VhcmNoLmpzIC9Vc2Vycy9taWhpcm1hY3BybzEzL0RvY3VtZW50cy9HaXRIdWIvcG9sYXItYm9va3NoZWxmL3dlYi9qc1xuICovIFxuZm9yICh2YXIgeCA9IDI7IHggPCA0OyB4KyspIHtcbiAgICBsZXQgb3B0cyA9IG5ldyBEZWZhdWx0T3B0cygpO1xuICAgIHZhciBteUFyZ3MgPSBwcm9jZXNzLmFyZ3ZbeF07XG5cbiAgICAvLy8gU2VhcmNoLmZpbmQgcmV0dXJucyBhbiBhcnJheSB3aXRoIGFsbCB0aGUgZmlsZXMgaW4gdGhlIGRpcmVjdG9yeVxuICAgIC8vLyBpdGVyYXRlcyB0aHJvdWdoIGVhY2ggZmlsZSBpbiB0aGUgZGlyZWN0b3J5XG4gICAgdmFyIGZpbGVNYXAgPSBTZWFyY2guZmluZChteUFyZ3MsIG9wdHMpO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgZmlsZU1hcC5sZW5ndGg7IGsrKykge1xuICAgICAgICBpZiAoaGl0TWFwLmhhcyhmaWxlTWFwW2tdLnBhdGgpID09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoZmlsZU1hcFtrXS5uYW1lLmluY2x1ZGVzKCd0ZXN0LnRzJykgIHx8IGZpbGVNYXBba10ubmFtZS5pbmNsdWRlcygnLmQudHMnKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8vIGNoZWNrcyB0byBtYWtlIHN1cmUgdGhhdCB0aGUgZmlsZSB0eXBlIGlzIGVpdGhlciAudHMgb3IgLnRzeFxuICAgICAgICAgICAgZWxzZSBpZiAoZmlsZU1hcFtrXS5uYW1lLnNwbGl0KCcuJykucG9wKCkgPT09ICd0cycgfHwgZmlsZU1hcFtrXS5uYW1lLnNwbGl0KCcuJykucG9wKCkgPT09ICd0c3gnKSB7XG4gICAgICAgICAgICAgICAgLy8vIGluaXRpYWxpemVzIGhpdE1hcFxuICAgICAgICAgICAgICAgIGhpdE1hcC5zZXQoZmlsZU1hcFtrXS5wYXRoLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbGVNYXAubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAvLy8gbWFwIG9mIHRoZSBmaWxlIHR5cGUsIG5hbWUsIHBhdGggXG4gICAgICAgIHZhciBmaWxlID0gZmlsZU1hcFtpXTtcbiAgICAgICAgdmFyIGluaXRpYWxGaWxlTmFtZSA9IGZpbGUubmFtZTtcbiAgICAgICAgdmFyIGluaXRpYWxGaWxlUGF0aCA9IGZpbGUucGF0aDtcbiAgICAgICAgXG4gICAgICAgIC8vLyBjaGVja3MgdG8gc2VlIGlmIHRoZSBmaWxlIG5hbWUgaXMgdGVzdC50c1xuICAgICAgICAvLy8gaWYgaXQgaXMgdGhlbiBjb250aW51ZXMgdG8gdGhlIG5leHQgZmlsZVxuICAgICAgICBpZiAoZmlsZS5uYW1lLmluY2x1ZGVzKCd0ZXN0LnRzJykgIHx8IGZpbGUubmFtZS5pbmNsdWRlcygnLmQudHMnKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8vIGNoZWNrcyB0byBtYWtlIHN1cmUgdGhhdCB0aGUgZmlsZSB0eXBlIGlzIGVpdGhlciAudHMgb3IgLnRzeFxuICAgICAgICBlbHNlIGlmIChpbml0aWFsRmlsZU5hbWUuc3BsaXQoJy4nKS5wb3AoKSA9PT0gJ3RzJyB8fCBpbml0aWFsRmlsZU5hbWUuc3BsaXQoJy4nKS5wb3AoKSA9PT0gJ3RzeCcpIHtcbiAgICAgICAgICAgIC8vLyBnZXRzIGFsbCB0aGUgY29udGVudHMgb2YgdGhlIGN1cnJlbnQgZmlsZVxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhpbml0aWFsRmlsZVBhdGgsJ3V0ZjgnKTtcbiAgICAgICAgICAgIC8vLyBzcGxpdHMgZWFjaCBsaW5lIG9mIGRhdGEgdG8gYWxsb3cgdXMgdG8gcGFyc2UgdGhyb3VnaCBlYWNoIG9uZVxuICAgICAgICAgICAgY29uc3QgbGluZXMgPSBkYXRhLnNwbGl0KC9cXHI/XFxuLyk7XG4gICAgICAgICAgICAvLy8gY3JlYXRlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBmb3IgdGhlIGltcG9ydCBsaW5lc1xuICAgICAgICAgICAgbGV0IHJlID0gL2ltcG9ydCg/OltcIidcXHNdKihbXFx3Knt9XFxuXFxyXFx0LCBdKylmcm9tXFxzKik/W1wiJ1xcc10uKihbQFxcd18tXSspW1wiJ1xcc10uKjskLztcbiAgICAgICAgICAgIC8vLyBpdGVyYXRlcyB0aHJvdWdoIGVhY2ggbGluZSBvZiB0aGUgZmlsZVxuICAgICAgICAgICAgbGluZXMuZm9yRWFjaCgobGluZSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vLyBjaGVja3MgdG8gc2VlIGlmIHRoZSBsaW5lIG1hdGNoZXMgdGhlIGZvcm1hdCBvZiB0aGUgcmVndWxhciBleHByZXNzaW9uXG4gICAgICAgICAgICAgICAgbGV0IGltcG9ydExpbmUgPSBsaW5lLm1hdGNoKHJlKTtcbiAgICAgICAgICAgICAgICAvLy8gbWFrZXMgc3VyZSB0aGF0IHRoZSBsaW5lIGFjdHVhbGx5IGhhcyB0aGUgcHJvcGVyIGZvcm1hdCBvZiB0aGUgcmVnRXhcbiAgICAgICAgICAgICAgICBpZiAoaW1wb3J0TGluZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vLyBnZXRzIHRoZSBlbnRpcmUgaW1wb3J0IGxpbmVzIGNvbnRlbnRzXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbXBvcnRWYWwgPSBpbXBvcnRMaW5lWzBdO1xuICAgICAgICAgICAgICAgICAgICAvLy8gc3BsaXRzIHRoZSBsaW5lIGJhc2VkIG9mZiBzcGFjZXMgYW5kIGdldHMgb25seSB0aGUgZmlsZSBwYXRoXG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWxlUGF0aCA9IGltcG9ydFZhbC5zcGxpdCgnICcpLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZnVsbFBhdGg7XG4gICAgICAgICAgICAgICAgICAgIC8vLyBjb252ZXJ0cyB0aGF0IGZpbGUgcGF0aCBpbnRvIGEgZnVsbCBmaWxlIHBhdGhcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVQYXRoICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVQYXRoLmluY2x1ZGVzKCcuLycpIHx8IGZpbGVQYXRoLmluY2x1ZGVzKCcuLi8nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLyBmaXhlcyB0aGUgcHVuY3R1YXRpb24gb2YgdGhlIGZpbGUgcGF0aCBvZiB0aGUgaW1wb3J0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVBhdGggPSBmaWxlUGF0aC5yZXBsYWNlKC9bJ1wiXSsvZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlUGF0aC5pbmNsdWRlcygnLnRzJykgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVBhdGggPSBmaWxlUGF0aC5yZXBsYWNlKGZpbGVQYXRoLnN1YnN0cmluZyhmaWxlUGF0aC5sZW5ndGgtMSksIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlUGF0aCA9IGZpbGVQYXRoICsgJy50cyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGNyZWF0ZXMgdGhlIGZ1bGwgcGF0aCB3aXRoIHRoZSBwcm9wZXIgZGlyZWN0b3J5IG5hbWUgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogY2hlY2tzIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBwYXRoIGV4aXN0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmdWxsRGlyZWN0b3J5ID0gcGF0aC5kaXJuYW1lKGluaXRpYWxGaWxlUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFBhdGggPSBwYXRoLnJlc29sdmUoZnVsbERpcmVjdG9yeSwgZmlsZVBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcy5leGlzdHNTeW5jKGZ1bGxQYXRoKSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsUGF0aCA9IGZ1bGxQYXRoICsgJ3gnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhmdWxsUGF0aCkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxQYXRoID0gZnVsbFBhdGgucmVwbGFjZShmdWxsUGF0aC5zdWJzdHJpbmcoZnVsbFBhdGgubGVuZ3RoLTMpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxQYXRoID0gZnVsbFBhdGggKyAnZC50cyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnVsbFBhdGguaW5jbHVkZXMoJ3V0aWxzLmpzLmQudHMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxQYXRoID0gZnVsbFBhdGgucmVwbGFjZShmdWxsUGF0aC5zdWJzdHJpbmcoZnVsbFBhdGgubGVuZ3RoLTcpLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsUGF0aCA9IGZ1bGxQYXRoICsgJ3RzJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcy5leGlzdHNTeW5jKGZ1bGxQYXRoKSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkZpbGUgZG9lcyBub3QgZXhpc3Q6IFwiICsgZnVsbFBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoZnVsbFBhdGggIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLy8gY2hlY2tzIHRvIHNlZSBpZiB0aGUgaGl0bWFwIGFscmVhZHkgaGFzIHRoYXQgcGF0aFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhpdE1hcC5oYXMoZnVsbFBhdGgpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIGlmIGl0IGRvZXMgdGhlbiBpbmNyZW1lbnRzIHRoZSB2YWx1ZSBvZiB0aGF0IGZpbGUgYnkgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyVmFsID0gaGl0TWFwLmdldChmdWxsUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGl0TWFwLnNldChmdWxsUGF0aCwgY3VyclZhbCArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8vIGlmIHRoZSBoaXRtYXAgZG9lcyBub3QgaGF2ZSB0aGF0IHBhdGggYXMgYSBrZXkgYWxyZWFkeVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIHRoZW4gc2V0cyB0aGF0IGZpbGUgcGF0aCB0byBoYXZlIGEgdmFsdWUgb2YgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpdE1hcC5zZXQoZnVsbFBhdGgsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuXG4vKipcbiAqIFNvcnRzIHRoZSBtYXAgaW4gb3JkZXIgYmFzZWQgb24gdGhlIHZhbHVlcyBcbiAqL1xuaGl0TWFwW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiogKCkge1xuICAgIHlpZWxkKiBbLi4udGhpcy5lbnRyaWVzKCldLnNvcnQoKGEsIGIpID0+IGFbMV0gLSBiWzFdKTtcbn1cblxuLy8vIG1ha2VzIHRoZSBtYXAgaW50byBhIHRhYmxlIHR5cGUgZm9ybWF0IHdpdGggYSBuZXN0ZWQgYXJyYXlcbnZhciB1cGRhdGVkSGl0TWFwID0gWy4uLmhpdE1hcF07XG5cbi8qKlxuICogc3dhcHMgdGhlIGtleSBhbmQgdGhlIHZhbHVlIG9mIHRoZSBtYXAsIHNvIHRoZSBudW1iZXIgb2YgaGl0cyBpcyBmb3JtYXR0ZWQgdG8gdGhlIGxlZnQgb2YgdGhlIGZ1bGwgZmlsZSBwYXRoXG4gKi9cbnZhciBmaW5hbEhpdE1hcCA9IFtdO1xuZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHVwZGF0ZWRIaXRNYXAubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgdmFyIGN1cnJlbnRBcnJheSA9IHVwZGF0ZWRIaXRNYXBbaW5kZXhdO1xuICAgIHZhciBrZXkgPSBjdXJyZW50QXJyYXlbMF07XG4gICAgdmFyIHZhbHVlID0gY3VycmVudEFycmF5WzFdO1xuICAgIGZpbmFsSGl0TWFwW2luZGV4XSA9IFt2YWx1ZSwga2V5XTtcbn1cblxuLyoqXG4gKiBwcmludHMgb3V0IHRoZSBmaW5hbEhpdE1hcFxuICovXG5mb3IgKHZhciBqID0gMDsgaiA8IGZpbmFsSGl0TWFwLmxlbmd0aDsgaisrKSB7XG4gICAgdmFyIGN1cnIgPSBmaW5hbEhpdE1hcFtqXTtcbiAgICBpZiAoY3VyclsxXS5pbmNsdWRlcygnVGVzdCcpID09IGZhbHNlICYmIGN1cnJbMV0uaW5jbHVkZXMoJ3Rlc3QnKSA9PSBmYWxzZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhjdXJyWzBdLCAnICcsIGN1cnJbMV0pO1xuICAgIH1cbn0iXX0=