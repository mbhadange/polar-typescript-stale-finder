"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const find_1 = require("./find");
const chai_1 = require("chai");
const find_2 = require("./find");
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
describe('GetExtension', function () {
    it("Test 1", function () {
        chai_1.assert.equal(find_1.Stale.getExtension("file.txt"), "txt");
    });
    it("Test 2", function () {
        chai_1.assert.equal(find_1.Stale.getExtension("file.name.with.dots.js"), "js");
    });
    it("Test 3", function () {
        chai_1.assert.equal(find_1.Stale.getExtension("file"), undefined);
    });
    it("Test 4", function () {
        chai_1.assert.equal(find_1.Stale.getExtension(" "), undefined);
    });
    it("Test 5", function () {
        chai_1.assert.equal(find_1.Stale.getExtension("currentfile/file.ts"), "ts");
    });
});
describe('FindFilesRecursively', function () {
    it("Test 1", function () {
        var data = path.resolve();
        const opts = new find_2.DefaultOpts();
        chai_1.assert.notEqual(find_1.Search.findFilesRecursively(data, opts), []);
    });
    it("Test 2", function () {
        var data = path.resolve();
        const opts = new find_2.DefaultOpts();
        var searchArrayLength = (find_1.Search.findFilesRecursively(data, opts)).length;
        var emptyArrayLength = ([]).length;
        chai_1.assert.notEqual(searchArrayLength, emptyArrayLength);
    });
});
describe('InitializeTypescriptMapFiles', function () {
    it("Test 1", function () {
        const data = [];
        var currMap = new Map();
        var finalMap = find_1.Stale.initializeTypescriptMapFiles(data, currMap);
        var newMapLength = [...finalMap.keys()].length;
        chai_1.assert.equal(newMapLength, 0);
    });
    it("Test 2", function () {
        var data = path.resolve();
        const opts = new find_2.DefaultOpts();
        var fileArray = find_1.Search.findFilesRecursively(data, opts);
        var currMap = new Map();
        var finalMap = find_1.Stale.initializeTypescriptMapFiles(fileArray, currMap);
        var mapLength = [...finalMap.keys()].length;
        chai_1.assert.equal(mapLength, 3);
    });
});
describe('UpdateHitMap', function () {
    it("Test 1", function () {
        var data = path.resolve();
        var currMap = new Map();
        currMap.set('a', 1);
        chai_1.assert.notEqual(find_1.Stale.updateHitMap(data, currMap), undefined);
    });
    it("Test 2", function () {
        var data = path.resolve();
        var currMap = new Map();
        var final = [...find_1.Stale.updateHitMap(data, currMap)].length;
        chai_1.assert.notEqual(final, 0);
    });
    it("Test 3", function () {
        var data = path.resolve();
        const opts = new find_2.DefaultOpts();
        var fileArray = find_1.Search.findFilesRecursively(data, opts);
        var currMap = new Map();
        var finalMap = find_1.Stale.initializeTypescriptMapFiles(fileArray, currMap);
        var mapLength = [...finalMap.keys()].length;
        var newMapLength = [...find_1.Stale.updateHitMap(data, finalMap).keys()].length;
        chai_1.assert.notEqual(mapLength, newMapLength);
    });
});
describe('CheckFullPath', function () {
    it("Test 1", function () {
        chai_1.assert.equal(find_1.Stale.checkFullPath(path.resolve()), path.resolve());
    });
    it("Test 2", function () {
        var currPath = "file.ts";
        chai_1.assert.equal(find_1.Stale.checkFullPath(currPath), "file.d.ts");
    });
});
describe('ExpandPath', function () {
    it("Test 1", function () {
        var file = "./file;";
        chai_1.assert.equal(find_1.Stale.expandPath(file), "./file.ts");
    });
    it("Test 2", function () {
        var file = "./path/to/file.ts;";
        chai_1.assert.equal(find_1.Stale.expandPath(file), "./path/to/file.ts;");
    });
    it("Test 3", function () {
        var file = ";";
        chai_1.assert.equal(find_1.Stale.expandPath(file), ".ts");
    });
});
describe('SortMap', function () {
    it("Test 1", function () {
        var currMap = new Map();
        currMap.set('a', 3);
        currMap.set('b', 6);
        currMap.set('d', 1);
        currMap.set('z', 0);
        var finalMap = find_1.Stale.sortMap(currMap);
        let map = new Map([
            ["a", 0],
            ["b", 1],
            ["d", 3],
            ["z", 6]
        ]);
        chai_1.assert.notEqual(finalMap, map);
    });
});
describe('SwapMapValues', function () {
    it("Test 1", function () {
        var currArray = [['a', 1], ['b', 2], ['c', 3]];
        chai_1.assert.notEqual(find_1.Stale.swapMapValues(currArray), currArray);
    });
    it("Test 2", function () {
        var currArray = [['a', 1], ['b', 2], ['c', 3]];
        var finalArray = [[1, 'a'], [2, 'b'], [3, 'c']];
        chai_1.assert.deepEqual(find_1.Stale.swapMapValues(currArray), finalArray);
    });
});
describe('IsNotStale', function () {
    it("Test 1", function () {
        const data = fs.readFileSync("./src/stale-code/search/Search.ts", 'utf8');
        chai_1.assert.equal(find_1.Stale.isNotStale(data), true);
    });
    it("Test 2", function () {
        const data = fs.readFileSync("./src/stale-code/search/find.ts", 'utf8');
        chai_1.assert.equal(find_1.Stale.isNotStale(data), true);
    });
});
describe('ParseImports', function () {
    it("Test 1", function () {
        const data = fs.readFileSync("/Users/mihirmacpro13/Documents/GitHub/polar-bookshelf/web/js/datastore/PersistenceLayer.ts", 'utf8');
        console.log(find_1.Stale.parseImports(data));
    });
});
//# sourceMappingURL=data:application/json;base64,